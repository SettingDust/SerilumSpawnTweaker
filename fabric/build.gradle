plugins {
    id 'java'
    id 'idea'
    id 'maven-publish'
    id 'fabric-loom'
}
base {
    archivesName = "${mod_name}-fabric-${minecraft_version}"
}

repositories {
    maven {
        name = 'ParchmentMC'
        url = 'https://maven.parchmentmc.org'
    }
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-$minecraft_version:$parchment_version@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
//    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'
    implementation project(":common")

    include(implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:0.2.0")))

    modImplementation "maven.modrinth:collective:1.20.1-6.66-forge+fabric"
    modImplementation "maven.modrinth:village-spawn-point:1.20.1-4.0-forge+fabric"
    modImplementation "maven.modrinth:biome-spawn-point:1.20.1-2.0-forge+fabric"
    modImplementation "maven.modrinth:async-locator:1.20-1.3.0-fabric"

    modImplementation "fuzs.forgeconfigapiport:forgeconfigapiport-fabric:8.0.0"
    modRuntimeOnly "fuzs.forgeconfigscreens:forgeconfigscreens-fabric:8.0.2"
}

loom {
    if (project(":common").file("src/main/resources/${mod_id}.accesswidener").exists()) {
        accessWidenerPath.set(project(":common").file("src/main/resources/${mod_id}.accesswidener"))
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
            vmArgs("-Dmixin.debug.export=true", "-Dmixin.debug.verbose=true")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
    mods {
        "$mod_id" {
            sourceSet sourceSets.main
            sourceSet "main", project(":common")
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(project(":common").sourceSets.main.allJava)
}
tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId base.archivesName.get()
            from components.java
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}
