plugins {
    id 'java'
    id 'fabric-loom' version '1.3.+' apply(false)
    id 'net.minecraftforge.gradle' version '[6.0,6.2)' apply(false)
    id 'org.spongepowered.gradle.vanilla' version '0.2.1-SNAPSHOT' apply(false)
    id("org.spongepowered.mixin") version "0.7-SNAPSHOT" apply(false)
    id("com.github.johnrengelman.shadow") version "8.1.1"
    id("com.modrinth.minotaur") version "2.+"
    id("co.uzzu.dotenv.gradle") version "2.+"
}

subprojects {
    apply plugin: 'java'

    java.toolchain.languageVersion = JavaLanguageVersion.of(17)
    java.withSourcesJar()
    java.withJavadocJar()

    jar {
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${mod_name}" }
        }
        manifest {
            attributes([
                    'Specification-Title'     : mod_name,
                    'Specification-Vendor'    : mod_author,
                    'Specification-Version'   : project.jar.archiveVersion,
                    'Implementation-Title'    : project.name,
                    'Implementation-Version'  : project.jar.archiveVersion,
                    'Implementation-Vendor'   : mod_author,
                    'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    'Timestamp'               : System.currentTimeMillis(),
                    'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                    'Built-On-Minecraft'      : minecraft_version
            ])
        }
    }

    sourcesJar {
        from(rootProject.file("LICENSE")) {
            rename { "${it}_${mod_name}" }
        }
    }

    repositories {
        maven {
            name = "Fuzs Mod Resources"
            url = "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"
            content {
                includeGroup("fuzs.forgeconfigapiport")
                includeGroup("fuzs.forgeconfigscreens")
            }
        }
        mavenCentral()
        maven {
            name = 'Sponge / Mixin'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }
        maven {
            name = 'BlameJared Maven (JEI / CraftTweaker / Bookshelf)'
            url = 'https://maven.blamejared.com'
        }
        maven {
            url = 'https://maven.terraformersmc.com/releases/'
        }
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.encoding = 'UTF-8'
        it.options.getRelease().set(17)
    }

    processResources {
        def expandProps = [
                "version"                   : version,
                "group"                     : project.group, //Else we target the task's group.
                "minecraft_version"         : minecraft_version,
                "forge_version"             : forge_version,
                "forge_loader_version_range": forge_loader_version_range,
                "forge_version_range"       : forge_version_range,
                "minecraft_version_range"   : minecraft_version_range,
                "fabric_version"            : fabric_version,
                "fabric_loader_version"     : fabric_loader_version,
                "mod_name"                  : mod_name,
                "mod_author"                : mod_author,
                "mod_id"                    : mod_id,
                "license"                   : license,
                "description"               : project.description
        ]

        filesMatching(['pack.mcmeta', 'fabric.mod.json', 'META-INF/mods.toml', '*.mixins.json']) {
            expand expandProps
        }
        inputs.properties(expandProps)
    }

    // Disables Gradle's custom module metadata from being published to maven. The
    // metadata includes mapped dependencies which are not reasonably consumable by
    // other mod developers.
    tasks.withType(GenerateModuleMetadata).configureEach {

        enabled = false
    }
}

dependencies {
    shadow(project(":fabric")) { transitive = false }
    shadow(project(":forge")) { transitive = false }
}

tasks {
    shadowJar {
        configurations = [project.configurations.shadow]
        archiveClassifier = ""
    }
    build {
        dependsOn(shadowJar)
    }
    jar {
        enabled = false
    }
}

modrinth {
    token.set(env.MODRINTH_TOKEN.value ?: "")
    // This is the default. Remember to have the MODRINTH_TOKEN environment variable set or else this will fail, or set it to whatever you want - just make sure it stays private!
    projectId.set("serilum-spawn-tweaker") // This can be the project ID or the slug. Either will work!
    syncBodyFrom.set(rootProject.file("README.md").text)
    versionType.set("release") // This is the default -- can also be `beta` or `alpha`
    uploadFile.set(rootProject.tasks.shadowJar) // With Loom, this MUST be set to `remapJar` instead of `jar`!
    gameVersions.addAll(
            "1.20.1",
    ) // Must be an array, even with only one version
    loaders.addAll("fabric", "quilt", "forge")
    // Must also be an array - no need to specify this if you're using Loom or ForgeGradle
    dependencies {
        optional.project("village-spawn-point")
        optional.project("biome-spawn-point")
    }
}
